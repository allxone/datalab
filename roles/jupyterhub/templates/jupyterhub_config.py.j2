# {{ ansible_managed }}
# Configuration file for jupyterhub.

c = get_config()
c.JupyterHub.ip = 'localhost'
c.JupyterHub.port = 8000
c.JupyterHub.cookie_secret_file = u'{{ jupyterhub.srv_dir }}/cookie_secret'
c.JupyterHub.db_url = u'{{ jupyterhub.srv_dir }}/jupyterhub.sqlite'
c.JupyterHub.confirm_no_ssl = True
{% if not jupyterhub.cleanup_on_shutdown %}
c.JupyterHub.cleanup_proxy = False
c.JupyterHub.cleanup_servers = False
{% endif %}

# Authenticator
c.PAMAuthenticator.service = '{{ jupyterhub.authenticator.pamservice }}'

# Spawner
c.JupyterHub.spawner_class = '{{ jupyterhub.spawner_class }}'
c.ProfilesSpawner.default_profiles = [
       ( "Global sudospawner", 'sudospawner', 'sudospawner.SudoSpawner', {'cmd':['{{ jupyterhub.srv_dir }}/sudospawner-singleuser']}, '*' )
]
FilteredSpawner_config_file_path='{{ jupyterhub.config_dir }}/tenants.yml'

{% if jupyter.jupyterlab_default %}
c.Spawner.default_url = '/lab'
{% endif %}

# A list of jupyterhub groups to create.
c.JupyterHub.load_groups = {
{%- for group in jupyterhub.groups -%}
    '{{ group.name }}': [
{%- for member in group.members -%}
        '{{ member }}',
{%- endfor -%}
    ],
{% endfor -%}
}

{% if jupyterhub.oauth.enabled %}
c.JupyterHub.authenticator_class = u'oauthenticator.LocalGitHubOAuthenticator'
c.LocalGitHubOAuthenticator.create_system_users = True
c.Authenticator.add_user_cmd =  ['adduser', '-q', '--home', '{{ home_dir }}/USERNAME', '--gecos', '""', '--disabled-password']
c.GitHubOAuthenticator.oauth_callback_url = u'{{ jupyterhub.oauth.callback_url }}'
c.GitHubOAuthenticator.client_id = u'{{ jupyterhub.oauth.client_id }}'
c.GitHubOAuthenticator.client_secret = u'{{ jupyterhub.oauth.client_secret }}'
{% endif %}

{% if jupyterhub.admin_users|length %}
c.Authenticator.admin_users = {
{%- for user in jupyterhub.admin_users[:-1] -%}
'{{ user }}',
{%- endfor -%}
'{{-jupyterhub.admin_users[-1]-}}'}
{% else %}
c.Authenticator.admin_users = set()
{% endif %}

{% if jupyterhub.users|length %}
c.Authenticator.whitelist = {
{%- for user in jupyterhub.users[:-1] -%}
'{{user}}',
{%- endfor -%}
'{{-jupyterhub.users[-1]-}}'}
{% else %}
c.Authenticator.whitelist = set()
{% endif %}

{% if jupyterhub.debug %}
#Enable logging
# Set the log level by value or name.
c.JupyterHub.log_level = 'DEBUG'
# Enable debug-logging of the single-user server
c.Spawner.debug = True
# Enable debug-logging of the single-user server
c.SudoSpawner.debug_mediator = True
{% endif %}